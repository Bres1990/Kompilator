Nieużywane symbole terminalne w gramatyce

   LCOMMENT
   RCOMMENT
   IDENTIFIER


Gramatyka

    0 $accept: program $end

    1 program: %empty
    2        | VAR vdeclarations START commands END

    3 vdeclarations: vdeclarations PIDENTIFIER
    4              | vdeclarations PIDENTIFIER LBRACKET NUM RBRACKET
    5              | %empty

    6 commands: commands command
    7         | %empty

    8 command: PIDENTIFIER LBRACKET PIDENTIFIER RBRACKET ASSIGN expression SEMICOLON
    9        | PIDENTIFIER LBRACKET NUM RBRACKET ASSIGN expression SEMICOLON
   10        | PIDENTIFIER ASSIGN expression SEMICOLON

   11 $@1: %empty

   12 $@2: %empty

   13 $@3: %empty

   14 command: IF condition $@1 THEN commands $@2 ELSE commands $@3 ENDIF

   15 $@4: %empty

   16 $@5: %empty

   17 command: WHILE condition $@4 DO commands $@5 ENDWHILE

   18 $@6: %empty

   19 $@7: %empty

   20 command: FOR PIDENTIFIER FROM VALUE TO VALUE $@6 DO commands $@7 ENDFOR

   21 $@8: %empty

   22 $@9: %empty

   23 command: FOR PIDENTIFIER FROM VALUE DOWNTO VALUE $@8 DO commands $@9 ENDFOR
   24        | READ PIDENTIFIER LBRACKET PIDENTIFIER RBRACKET SEMICOLON
   25        | READ PIDENTIFIER LBRACKET NUM RBRACKET SEMICOLON
   26        | READ PIDENTIFIER SEMICOLON
   27        | WRITE VALUE SEMICOLON
   28        | SKIP SEMICOLON

   29 expression: VALUE
   30           | VALUE PLUS VALUE
   31           | VALUE MINUS VALUE
   32           | VALUE MULT VALUE
   33           | VALUE DIV VALUE
   34           | VALUE MOD VALUE

   35 condition: VALUE
   36          | VALUE EQ VALUE
   37          | VALUE NEQ VALUE
   38          | VALUE LT VALUE
   39          | VALUE GT VALUE
   40          | VALUE GET VALUE
   41          | VALUE LET VALUE

   42 VALUE: NUM
   43      | PIDENTIFIER LBRACKET PIDENTIFIER RBRACKET
   44      | PIDENTIFIER LBRACKET NUM RBRACKET
   45      | PIDENTIFIER


Symbole terminalne i reguły, w których występują

$end (0) 0
error (256)
VAR (258) 2
START (259) 2
END (260) 2
LBRACKET (261) 4 8 9 24 25 43 44
RBRACKET (262) 4 8 9 24 25 43 44
LCOMMENT (263)
RCOMMENT (264)
IF (265) 14
THEN (266) 14
ELSE (267) 14
ENDIF (268) 14
WHILE (269) 17
DO (270) 17 20 23
ENDWHILE (271) 17
FOR (272) 20 23
FROM (273) 20 23
DOWNTO (274) 23
TO (275) 20
ENDFOR (276) 20 23
READ (277) 24 25 26
WRITE (278) 27
SKIP (279) 28
ASSIGN (280) 8 9 10
PLUS (281) 30
MINUS (282) 31
MULT (283) 32
DIV (284) 33
MOD (285) 34
EQ (286) 36
LT (287) 38
LET (288) 41
GT (289) 39
GET (290) 40
NEQ (291) 37
NUM (292) 4 9 25 42 44
PIDENTIFIER (293) 3 4 8 9 10 20 23 24 25 26 43 44 45
IDENTIFIER (294)
SEMICOLON (295) 8 9 10 24 25 26 27 28


Symbole nieterminalne i reguły, w których występują

$accept (41)
    po lewej: 0
program (42)
    po lewej: 1 2, po prawej: 0
vdeclarations (43)
    po lewej: 3 4 5, po prawej: 2 3 4
commands (44)
    po lewej: 6 7, po prawej: 2 6 14 17 20 23
command (45)
    po lewej: 8 9 10 14 17 20 23 24 25 26 27 28, po prawej: 6
$@1 (46)
    po lewej: 11, po prawej: 14
$@2 (47)
    po lewej: 12, po prawej: 14
$@3 (48)
    po lewej: 13, po prawej: 14
$@4 (49)
    po lewej: 15, po prawej: 17
$@5 (50)
    po lewej: 16, po prawej: 17
$@6 (51)
    po lewej: 18, po prawej: 20
$@7 (52)
    po lewej: 19, po prawej: 20
$@8 (53)
    po lewej: 21, po prawej: 23
$@9 (54)
    po lewej: 22, po prawej: 23
expression (55)
    po lewej: 29 30 31 32 33 34, po prawej: 8 9 10
condition (56)
    po lewej: 35 36 37 38 39 40 41, po prawej: 14 17
VALUE (57)
    po lewej: 42 43 44 45, po prawej: 20 23 27 29 30 31 32 33 34 35
    36 37 38 39 40 41


Stan 0

    0 $accept: . program $end

    VAR  przesunięcie, i przejście do stanu 1

    $domyślnie  redukcja przy użyciu reguły 1 (program)

    program  przejście do stanu 2


Stan 1

    2 program: VAR . vdeclarations START commands END

    $domyślnie  redukcja przy użyciu reguły 5 (vdeclarations)

    vdeclarations  przejście do stanu 3


Stan 2

    0 $accept: program . $end

    $end  przesunięcie, i przejście do stanu 4


Stan 3

    2 program: VAR vdeclarations . START commands END
    3 vdeclarations: vdeclarations . PIDENTIFIER
    4              | vdeclarations . PIDENTIFIER LBRACKET NUM RBRACKET

    START        przesunięcie, i przejście do stanu 5
    PIDENTIFIER  przesunięcie, i przejście do stanu 6


Stan 4

    0 $accept: program $end .

    $domyślnie  akceptowanie


Stan 5

    2 program: VAR vdeclarations START . commands END

    $domyślnie  redukcja przy użyciu reguły 7 (commands)

    commands  przejście do stanu 7


Stan 6

    3 vdeclarations: vdeclarations PIDENTIFIER .
    4              | vdeclarations PIDENTIFIER . LBRACKET NUM RBRACKET

    LBRACKET  przesunięcie, i przejście do stanu 8

    $domyślnie  redukcja przy użyciu reguły 3 (vdeclarations)


Stan 7

    2 program: VAR vdeclarations START commands . END
    6 commands: commands . command

    END          przesunięcie, i przejście do stanu 9
    IF           przesunięcie, i przejście do stanu 10
    WHILE        przesunięcie, i przejście do stanu 11
    FOR          przesunięcie, i przejście do stanu 12
    READ         przesunięcie, i przejście do stanu 13
    WRITE        przesunięcie, i przejście do stanu 14
    SKIP         przesunięcie, i przejście do stanu 15
    PIDENTIFIER  przesunięcie, i przejście do stanu 16

    command  przejście do stanu 17


Stan 8

    4 vdeclarations: vdeclarations PIDENTIFIER LBRACKET . NUM RBRACKET

    NUM  przesunięcie, i przejście do stanu 18


Stan 9

    2 program: VAR vdeclarations START commands END .

    $domyślnie  redukcja przy użyciu reguły 2 (program)


Stan 10

   14 command: IF . condition $@1 THEN commands $@2 ELSE commands $@3 ENDIF

    NUM          przesunięcie, i przejście do stanu 19
    PIDENTIFIER  przesunięcie, i przejście do stanu 20

    condition  przejście do stanu 21
    VALUE      przejście do stanu 22


Stan 11

   17 command: WHILE . condition $@4 DO commands $@5 ENDWHILE

    NUM          przesunięcie, i przejście do stanu 19
    PIDENTIFIER  przesunięcie, i przejście do stanu 20

    condition  przejście do stanu 23
    VALUE      przejście do stanu 22


Stan 12

   20 command: FOR . PIDENTIFIER FROM VALUE TO VALUE $@6 DO commands $@7 ENDFOR
   23        | FOR . PIDENTIFIER FROM VALUE DOWNTO VALUE $@8 DO commands $@9 ENDFOR

    PIDENTIFIER  przesunięcie, i przejście do stanu 24


Stan 13

   24 command: READ . PIDENTIFIER LBRACKET PIDENTIFIER RBRACKET SEMICOLON
   25        | READ . PIDENTIFIER LBRACKET NUM RBRACKET SEMICOLON
   26        | READ . PIDENTIFIER SEMICOLON

    PIDENTIFIER  przesunięcie, i przejście do stanu 25


Stan 14

   27 command: WRITE . VALUE SEMICOLON

    NUM          przesunięcie, i przejście do stanu 19
    PIDENTIFIER  przesunięcie, i przejście do stanu 20

    VALUE  przejście do stanu 26


Stan 15

   28 command: SKIP . SEMICOLON

    SEMICOLON  przesunięcie, i przejście do stanu 27


Stan 16

    8 command: PIDENTIFIER . LBRACKET PIDENTIFIER RBRACKET ASSIGN expression SEMICOLON
    9        | PIDENTIFIER . LBRACKET NUM RBRACKET ASSIGN expression SEMICOLON
   10        | PIDENTIFIER . ASSIGN expression SEMICOLON

    LBRACKET  przesunięcie, i przejście do stanu 28
    ASSIGN    przesunięcie, i przejście do stanu 29


Stan 17

    6 commands: commands command .

    $domyślnie  redukcja przy użyciu reguły 6 (commands)


Stan 18

    4 vdeclarations: vdeclarations PIDENTIFIER LBRACKET NUM . RBRACKET

    RBRACKET  przesunięcie, i przejście do stanu 30


Stan 19

   42 VALUE: NUM .

    $domyślnie  redukcja przy użyciu reguły 42 (VALUE)


Stan 20

   43 VALUE: PIDENTIFIER . LBRACKET PIDENTIFIER RBRACKET
   44      | PIDENTIFIER . LBRACKET NUM RBRACKET
   45      | PIDENTIFIER .

    LBRACKET  przesunięcie, i przejście do stanu 31

    $domyślnie  redukcja przy użyciu reguły 45 (VALUE)


Stan 21

   14 command: IF condition . $@1 THEN commands $@2 ELSE commands $@3 ENDIF

    $domyślnie  redukcja przy użyciu reguły 11 ($@1)

    $@1  przejście do stanu 32


Stan 22

   35 condition: VALUE .
   36          | VALUE . EQ VALUE
   37          | VALUE . NEQ VALUE
   38          | VALUE . LT VALUE
   39          | VALUE . GT VALUE
   40          | VALUE . GET VALUE
   41          | VALUE . LET VALUE

    EQ   przesunięcie, i przejście do stanu 33
    LT   przesunięcie, i przejście do stanu 34
    LET  przesunięcie, i przejście do stanu 35
    GT   przesunięcie, i przejście do stanu 36
    GET  przesunięcie, i przejście do stanu 37
    NEQ  przesunięcie, i przejście do stanu 38

    $domyślnie  redukcja przy użyciu reguły 35 (condition)


Stan 23

   17 command: WHILE condition . $@4 DO commands $@5 ENDWHILE

    $domyślnie  redukcja przy użyciu reguły 15 ($@4)

    $@4  przejście do stanu 39


Stan 24

   20 command: FOR PIDENTIFIER . FROM VALUE TO VALUE $@6 DO commands $@7 ENDFOR
   23        | FOR PIDENTIFIER . FROM VALUE DOWNTO VALUE $@8 DO commands $@9 ENDFOR

    FROM  przesunięcie, i przejście do stanu 40


Stan 25

   24 command: READ PIDENTIFIER . LBRACKET PIDENTIFIER RBRACKET SEMICOLON
   25        | READ PIDENTIFIER . LBRACKET NUM RBRACKET SEMICOLON
   26        | READ PIDENTIFIER . SEMICOLON

    LBRACKET   przesunięcie, i przejście do stanu 41
    SEMICOLON  przesunięcie, i przejście do stanu 42


Stan 26

   27 command: WRITE VALUE . SEMICOLON

    SEMICOLON  przesunięcie, i przejście do stanu 43


Stan 27

   28 command: SKIP SEMICOLON .

    $domyślnie  redukcja przy użyciu reguły 28 (command)


Stan 28

    8 command: PIDENTIFIER LBRACKET . PIDENTIFIER RBRACKET ASSIGN expression SEMICOLON
    9        | PIDENTIFIER LBRACKET . NUM RBRACKET ASSIGN expression SEMICOLON

    NUM          przesunięcie, i przejście do stanu 44
    PIDENTIFIER  przesunięcie, i przejście do stanu 45


Stan 29

   10 command: PIDENTIFIER ASSIGN . expression SEMICOLON

    NUM          przesunięcie, i przejście do stanu 19
    PIDENTIFIER  przesunięcie, i przejście do stanu 20

    expression  przejście do stanu 46
    VALUE       przejście do stanu 47


Stan 30

    4 vdeclarations: vdeclarations PIDENTIFIER LBRACKET NUM RBRACKET .

    $domyślnie  redukcja przy użyciu reguły 4 (vdeclarations)


Stan 31

   43 VALUE: PIDENTIFIER LBRACKET . PIDENTIFIER RBRACKET
   44      | PIDENTIFIER LBRACKET . NUM RBRACKET

    NUM          przesunięcie, i przejście do stanu 48
    PIDENTIFIER  przesunięcie, i przejście do stanu 49


Stan 32

   14 command: IF condition $@1 . THEN commands $@2 ELSE commands $@3 ENDIF

    THEN  przesunięcie, i przejście do stanu 50


Stan 33

   36 condition: VALUE EQ . VALUE

    NUM          przesunięcie, i przejście do stanu 19
    PIDENTIFIER  przesunięcie, i przejście do stanu 20

    VALUE  przejście do stanu 51


Stan 34

   38 condition: VALUE LT . VALUE

    NUM          przesunięcie, i przejście do stanu 19
    PIDENTIFIER  przesunięcie, i przejście do stanu 20

    VALUE  przejście do stanu 52


Stan 35

   41 condition: VALUE LET . VALUE

    NUM          przesunięcie, i przejście do stanu 19
    PIDENTIFIER  przesunięcie, i przejście do stanu 20

    VALUE  przejście do stanu 53


Stan 36

   39 condition: VALUE GT . VALUE

    NUM          przesunięcie, i przejście do stanu 19
    PIDENTIFIER  przesunięcie, i przejście do stanu 20

    VALUE  przejście do stanu 54


Stan 37

   40 condition: VALUE GET . VALUE

    NUM          przesunięcie, i przejście do stanu 19
    PIDENTIFIER  przesunięcie, i przejście do stanu 20

    VALUE  przejście do stanu 55


Stan 38

   37 condition: VALUE NEQ . VALUE

    NUM          przesunięcie, i przejście do stanu 19
    PIDENTIFIER  przesunięcie, i przejście do stanu 20

    VALUE  przejście do stanu 56


Stan 39

   17 command: WHILE condition $@4 . DO commands $@5 ENDWHILE

    DO  przesunięcie, i przejście do stanu 57


Stan 40

   20 command: FOR PIDENTIFIER FROM . VALUE TO VALUE $@6 DO commands $@7 ENDFOR
   23        | FOR PIDENTIFIER FROM . VALUE DOWNTO VALUE $@8 DO commands $@9 ENDFOR

    NUM          przesunięcie, i przejście do stanu 19
    PIDENTIFIER  przesunięcie, i przejście do stanu 20

    VALUE  przejście do stanu 58


Stan 41

   24 command: READ PIDENTIFIER LBRACKET . PIDENTIFIER RBRACKET SEMICOLON
   25        | READ PIDENTIFIER LBRACKET . NUM RBRACKET SEMICOLON

    NUM          przesunięcie, i przejście do stanu 59
    PIDENTIFIER  przesunięcie, i przejście do stanu 60


Stan 42

   26 command: READ PIDENTIFIER SEMICOLON .

    $domyślnie  redukcja przy użyciu reguły 26 (command)


Stan 43

   27 command: WRITE VALUE SEMICOLON .

    $domyślnie  redukcja przy użyciu reguły 27 (command)


Stan 44

    9 command: PIDENTIFIER LBRACKET NUM . RBRACKET ASSIGN expression SEMICOLON

    RBRACKET  przesunięcie, i przejście do stanu 61


Stan 45

    8 command: PIDENTIFIER LBRACKET PIDENTIFIER . RBRACKET ASSIGN expression SEMICOLON

    RBRACKET  przesunięcie, i przejście do stanu 62


Stan 46

   10 command: PIDENTIFIER ASSIGN expression . SEMICOLON

    SEMICOLON  przesunięcie, i przejście do stanu 63


Stan 47

   29 expression: VALUE .
   30           | VALUE . PLUS VALUE
   31           | VALUE . MINUS VALUE
   32           | VALUE . MULT VALUE
   33           | VALUE . DIV VALUE
   34           | VALUE . MOD VALUE

    PLUS   przesunięcie, i przejście do stanu 64
    MINUS  przesunięcie, i przejście do stanu 65
    MULT   przesunięcie, i przejście do stanu 66
    DIV    przesunięcie, i przejście do stanu 67
    MOD    przesunięcie, i przejście do stanu 68

    $domyślnie  redukcja przy użyciu reguły 29 (expression)


Stan 48

   44 VALUE: PIDENTIFIER LBRACKET NUM . RBRACKET

    RBRACKET  przesunięcie, i przejście do stanu 69


Stan 49

   43 VALUE: PIDENTIFIER LBRACKET PIDENTIFIER . RBRACKET

    RBRACKET  przesunięcie, i przejście do stanu 70


Stan 50

   14 command: IF condition $@1 THEN . commands $@2 ELSE commands $@3 ENDIF

    $domyślnie  redukcja przy użyciu reguły 7 (commands)

    commands  przejście do stanu 71


Stan 51

   36 condition: VALUE EQ VALUE .

    $domyślnie  redukcja przy użyciu reguły 36 (condition)


Stan 52

   38 condition: VALUE LT VALUE .

    $domyślnie  redukcja przy użyciu reguły 38 (condition)


Stan 53

   41 condition: VALUE LET VALUE .

    $domyślnie  redukcja przy użyciu reguły 41 (condition)


Stan 54

   39 condition: VALUE GT VALUE .

    $domyślnie  redukcja przy użyciu reguły 39 (condition)


Stan 55

   40 condition: VALUE GET VALUE .

    $domyślnie  redukcja przy użyciu reguły 40 (condition)


Stan 56

   37 condition: VALUE NEQ VALUE .

    $domyślnie  redukcja przy użyciu reguły 37 (condition)


Stan 57

   17 command: WHILE condition $@4 DO . commands $@5 ENDWHILE

    $domyślnie  redukcja przy użyciu reguły 7 (commands)

    commands  przejście do stanu 72


Stan 58

   20 command: FOR PIDENTIFIER FROM VALUE . TO VALUE $@6 DO commands $@7 ENDFOR
   23        | FOR PIDENTIFIER FROM VALUE . DOWNTO VALUE $@8 DO commands $@9 ENDFOR

    DOWNTO  przesunięcie, i przejście do stanu 73
    TO      przesunięcie, i przejście do stanu 74


Stan 59

   25 command: READ PIDENTIFIER LBRACKET NUM . RBRACKET SEMICOLON

    RBRACKET  przesunięcie, i przejście do stanu 75


Stan 60

   24 command: READ PIDENTIFIER LBRACKET PIDENTIFIER . RBRACKET SEMICOLON

    RBRACKET  przesunięcie, i przejście do stanu 76


Stan 61

    9 command: PIDENTIFIER LBRACKET NUM RBRACKET . ASSIGN expression SEMICOLON

    ASSIGN  przesunięcie, i przejście do stanu 77


Stan 62

    8 command: PIDENTIFIER LBRACKET PIDENTIFIER RBRACKET . ASSIGN expression SEMICOLON

    ASSIGN  przesunięcie, i przejście do stanu 78


Stan 63

   10 command: PIDENTIFIER ASSIGN expression SEMICOLON .

    $domyślnie  redukcja przy użyciu reguły 10 (command)


Stan 64

   30 expression: VALUE PLUS . VALUE

    NUM          przesunięcie, i przejście do stanu 19
    PIDENTIFIER  przesunięcie, i przejście do stanu 20

    VALUE  przejście do stanu 79


Stan 65

   31 expression: VALUE MINUS . VALUE

    NUM          przesunięcie, i przejście do stanu 19
    PIDENTIFIER  przesunięcie, i przejście do stanu 20

    VALUE  przejście do stanu 80


Stan 66

   32 expression: VALUE MULT . VALUE

    NUM          przesunięcie, i przejście do stanu 19
    PIDENTIFIER  przesunięcie, i przejście do stanu 20

    VALUE  przejście do stanu 81


Stan 67

   33 expression: VALUE DIV . VALUE

    NUM          przesunięcie, i przejście do stanu 19
    PIDENTIFIER  przesunięcie, i przejście do stanu 20

    VALUE  przejście do stanu 82


Stan 68

   34 expression: VALUE MOD . VALUE

    NUM          przesunięcie, i przejście do stanu 19
    PIDENTIFIER  przesunięcie, i przejście do stanu 20

    VALUE  przejście do stanu 83


Stan 69

   44 VALUE: PIDENTIFIER LBRACKET NUM RBRACKET .

    $domyślnie  redukcja przy użyciu reguły 44 (VALUE)


Stan 70

   43 VALUE: PIDENTIFIER LBRACKET PIDENTIFIER RBRACKET .

    $domyślnie  redukcja przy użyciu reguły 43 (VALUE)


Stan 71

    6 commands: commands . command
   14 command: IF condition $@1 THEN commands . $@2 ELSE commands $@3 ENDIF

    IF           przesunięcie, i przejście do stanu 10
    WHILE        przesunięcie, i przejście do stanu 11
    FOR          przesunięcie, i przejście do stanu 12
    READ         przesunięcie, i przejście do stanu 13
    WRITE        przesunięcie, i przejście do stanu 14
    SKIP         przesunięcie, i przejście do stanu 15
    PIDENTIFIER  przesunięcie, i przejście do stanu 16

    $domyślnie  redukcja przy użyciu reguły 12 ($@2)

    command  przejście do stanu 17
    $@2      przejście do stanu 84


Stan 72

    6 commands: commands . command
   17 command: WHILE condition $@4 DO commands . $@5 ENDWHILE

    IF           przesunięcie, i przejście do stanu 10
    WHILE        przesunięcie, i przejście do stanu 11
    FOR          przesunięcie, i przejście do stanu 12
    READ         przesunięcie, i przejście do stanu 13
    WRITE        przesunięcie, i przejście do stanu 14
    SKIP         przesunięcie, i przejście do stanu 15
    PIDENTIFIER  przesunięcie, i przejście do stanu 16

    $domyślnie  redukcja przy użyciu reguły 16 ($@5)

    command  przejście do stanu 17
    $@5      przejście do stanu 85


Stan 73

   23 command: FOR PIDENTIFIER FROM VALUE DOWNTO . VALUE $@8 DO commands $@9 ENDFOR

    NUM          przesunięcie, i przejście do stanu 19
    PIDENTIFIER  przesunięcie, i przejście do stanu 20

    VALUE  przejście do stanu 86


Stan 74

   20 command: FOR PIDENTIFIER FROM VALUE TO . VALUE $@6 DO commands $@7 ENDFOR

    NUM          przesunięcie, i przejście do stanu 19
    PIDENTIFIER  przesunięcie, i przejście do stanu 20

    VALUE  przejście do stanu 87


Stan 75

   25 command: READ PIDENTIFIER LBRACKET NUM RBRACKET . SEMICOLON

    SEMICOLON  przesunięcie, i przejście do stanu 88


Stan 76

   24 command: READ PIDENTIFIER LBRACKET PIDENTIFIER RBRACKET . SEMICOLON

    SEMICOLON  przesunięcie, i przejście do stanu 89


Stan 77

    9 command: PIDENTIFIER LBRACKET NUM RBRACKET ASSIGN . expression SEMICOLON

    NUM          przesunięcie, i przejście do stanu 19
    PIDENTIFIER  przesunięcie, i przejście do stanu 20

    expression  przejście do stanu 90
    VALUE       przejście do stanu 47


Stan 78

    8 command: PIDENTIFIER LBRACKET PIDENTIFIER RBRACKET ASSIGN . expression SEMICOLON

    NUM          przesunięcie, i przejście do stanu 19
    PIDENTIFIER  przesunięcie, i przejście do stanu 20

    expression  przejście do stanu 91
    VALUE       przejście do stanu 47


Stan 79

   30 expression: VALUE PLUS VALUE .

    $domyślnie  redukcja przy użyciu reguły 30 (expression)


Stan 80

   31 expression: VALUE MINUS VALUE .

    $domyślnie  redukcja przy użyciu reguły 31 (expression)


Stan 81

   32 expression: VALUE MULT VALUE .

    $domyślnie  redukcja przy użyciu reguły 32 (expression)


Stan 82

   33 expression: VALUE DIV VALUE .

    $domyślnie  redukcja przy użyciu reguły 33 (expression)


Stan 83

   34 expression: VALUE MOD VALUE .

    $domyślnie  redukcja przy użyciu reguły 34 (expression)


Stan 84

   14 command: IF condition $@1 THEN commands $@2 . ELSE commands $@3 ENDIF

    ELSE  przesunięcie, i przejście do stanu 92


Stan 85

   17 command: WHILE condition $@4 DO commands $@5 . ENDWHILE

    ENDWHILE  przesunięcie, i przejście do stanu 93


Stan 86

   23 command: FOR PIDENTIFIER FROM VALUE DOWNTO VALUE . $@8 DO commands $@9 ENDFOR

    $domyślnie  redukcja przy użyciu reguły 21 ($@8)

    $@8  przejście do stanu 94


Stan 87

   20 command: FOR PIDENTIFIER FROM VALUE TO VALUE . $@6 DO commands $@7 ENDFOR

    $domyślnie  redukcja przy użyciu reguły 18 ($@6)

    $@6  przejście do stanu 95


Stan 88

   25 command: READ PIDENTIFIER LBRACKET NUM RBRACKET SEMICOLON .

    $domyślnie  redukcja przy użyciu reguły 25 (command)


Stan 89

   24 command: READ PIDENTIFIER LBRACKET PIDENTIFIER RBRACKET SEMICOLON .

    $domyślnie  redukcja przy użyciu reguły 24 (command)


Stan 90

    9 command: PIDENTIFIER LBRACKET NUM RBRACKET ASSIGN expression . SEMICOLON

    SEMICOLON  przesunięcie, i przejście do stanu 96


Stan 91

    8 command: PIDENTIFIER LBRACKET PIDENTIFIER RBRACKET ASSIGN expression . SEMICOLON

    SEMICOLON  przesunięcie, i przejście do stanu 97


Stan 92

   14 command: IF condition $@1 THEN commands $@2 ELSE . commands $@3 ENDIF

    $domyślnie  redukcja przy użyciu reguły 7 (commands)

    commands  przejście do stanu 98


Stan 93

   17 command: WHILE condition $@4 DO commands $@5 ENDWHILE .

    $domyślnie  redukcja przy użyciu reguły 17 (command)


Stan 94

   23 command: FOR PIDENTIFIER FROM VALUE DOWNTO VALUE $@8 . DO commands $@9 ENDFOR

    DO  przesunięcie, i przejście do stanu 99


Stan 95

   20 command: FOR PIDENTIFIER FROM VALUE TO VALUE $@6 . DO commands $@7 ENDFOR

    DO  przesunięcie, i przejście do stanu 100


Stan 96

    9 command: PIDENTIFIER LBRACKET NUM RBRACKET ASSIGN expression SEMICOLON .

    $domyślnie  redukcja przy użyciu reguły 9 (command)


Stan 97

    8 command: PIDENTIFIER LBRACKET PIDENTIFIER RBRACKET ASSIGN expression SEMICOLON .

    $domyślnie  redukcja przy użyciu reguły 8 (command)


Stan 98

    6 commands: commands . command
   14 command: IF condition $@1 THEN commands $@2 ELSE commands . $@3 ENDIF

    IF           przesunięcie, i przejście do stanu 10
    WHILE        przesunięcie, i przejście do stanu 11
    FOR          przesunięcie, i przejście do stanu 12
    READ         przesunięcie, i przejście do stanu 13
    WRITE        przesunięcie, i przejście do stanu 14
    SKIP         przesunięcie, i przejście do stanu 15
    PIDENTIFIER  przesunięcie, i przejście do stanu 16

    $domyślnie  redukcja przy użyciu reguły 13 ($@3)

    command  przejście do stanu 17
    $@3      przejście do stanu 101


Stan 99

   23 command: FOR PIDENTIFIER FROM VALUE DOWNTO VALUE $@8 DO . commands $@9 ENDFOR

    $domyślnie  redukcja przy użyciu reguły 7 (commands)

    commands  przejście do stanu 102


Stan 100

   20 command: FOR PIDENTIFIER FROM VALUE TO VALUE $@6 DO . commands $@7 ENDFOR

    $domyślnie  redukcja przy użyciu reguły 7 (commands)

    commands  przejście do stanu 103


Stan 101

   14 command: IF condition $@1 THEN commands $@2 ELSE commands $@3 . ENDIF

    ENDIF  przesunięcie, i przejście do stanu 104


Stan 102

    6 commands: commands . command
   23 command: FOR PIDENTIFIER FROM VALUE DOWNTO VALUE $@8 DO commands . $@9 ENDFOR

    IF           przesunięcie, i przejście do stanu 10
    WHILE        przesunięcie, i przejście do stanu 11
    FOR          przesunięcie, i przejście do stanu 12
    READ         przesunięcie, i przejście do stanu 13
    WRITE        przesunięcie, i przejście do stanu 14
    SKIP         przesunięcie, i przejście do stanu 15
    PIDENTIFIER  przesunięcie, i przejście do stanu 16

    $domyślnie  redukcja przy użyciu reguły 22 ($@9)

    command  przejście do stanu 17
    $@9      przejście do stanu 105


Stan 103

    6 commands: commands . command
   20 command: FOR PIDENTIFIER FROM VALUE TO VALUE $@6 DO commands . $@7 ENDFOR

    IF           przesunięcie, i przejście do stanu 10
    WHILE        przesunięcie, i przejście do stanu 11
    FOR          przesunięcie, i przejście do stanu 12
    READ         przesunięcie, i przejście do stanu 13
    WRITE        przesunięcie, i przejście do stanu 14
    SKIP         przesunięcie, i przejście do stanu 15
    PIDENTIFIER  przesunięcie, i przejście do stanu 16

    $domyślnie  redukcja przy użyciu reguły 19 ($@7)

    command  przejście do stanu 17
    $@7      przejście do stanu 106


Stan 104

   14 command: IF condition $@1 THEN commands $@2 ELSE commands $@3 ENDIF .

    $domyślnie  redukcja przy użyciu reguły 14 (command)


Stan 105

   23 command: FOR PIDENTIFIER FROM VALUE DOWNTO VALUE $@8 DO commands $@9 . ENDFOR

    ENDFOR  przesunięcie, i przejście do stanu 107


Stan 106

   20 command: FOR PIDENTIFIER FROM VALUE TO VALUE $@6 DO commands $@7 . ENDFOR

    ENDFOR  przesunięcie, i przejście do stanu 108


Stan 107

   23 command: FOR PIDENTIFIER FROM VALUE DOWNTO VALUE $@8 DO commands $@9 ENDFOR .

    $domyślnie  redukcja przy użyciu reguły 23 (command)


Stan 108

   20 command: FOR PIDENTIFIER FROM VALUE TO VALUE $@6 DO commands $@7 ENDFOR .

    $domyślnie  redukcja przy użyciu reguły 20 (command)
